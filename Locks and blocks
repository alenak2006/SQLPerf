SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
   
DECLARE @blocked TABLE 
		(
			dbid SMALLINT NOT NULL,
			last_batch DATETIME NOT NULL,
			open_tran SMALLINT NOT NULL,
			sql_handle BINARY(20) NOT NULL,
			session_id SMALLINT NOT NULL,
			blocking_session_id SMALLINT NOT NULL,
			lastwaittype NCHAR(32) NOT NULL,
			waittime BIGINT NOT NULL,
			cpu INT NOT NULL,
			physical_io BIGINT NOT NULL,
			memusage INT NOT NULL
		); 
						
INSERT @blocked ( dbid, last_batch, open_tran, sql_handle, session_id, blocking_session_id, lastwaittype, waittime, cpu, physical_io, memusage )
SELECT
	sys1.dbid, sys1.last_batch, sys1.open_tran, sys1.sql_handle, 
	sys2.spid AS session_id, sys2.blocked AS blocking_session_id, sys2.lastwaittype, sys2.waittime, sys2.cpu, sys2.physical_io, sys2.memusage
FROM sys.sysprocesses AS sys1
JOIN sys.sysprocesses AS sys2
ON sys1.spid = sys2.blocked; SELECT  GETDATE() AS run_date , COALESCE( RIGHT('00' + CONVERT(VARCHAR(20), (ABS(r.total_elapsed_time) / 1000) / 86400), 2) + ':' + CONVERT(VARCHAR(20), (DATEADD(SECOND, (r.total_elapsed_time / 1000), 0) + DATEADD(MILLISECOND, (r.total_elapsed_time % 1000), 0)), 114), RIGHT('00' + CONVERT(VARCHAR(20), DATEDIFF(SECOND, s.last_request_start_time, GETDATE()) / 86400), 2) + ':' + CONVERT(VARCHAR(20), DATEADD(SECOND, DATEDIFF(SECOND, s.last_request_start_time, GETDATE()), 0), 114) ) AS [elapsed_time] ,
s.session_id ,
	COALESCE(DB_NAME(r.database_id), DB_NAME(blocked.dbid), 'N/A') AS database_name,
ISNULL(SUBSTRING(dest.text,
( query_stats.statement_start_offset / 2 ) + 1,
( ( CASE query_stats.statement_end_offset
	WHEN -1 THEN DATALENGTH(dest.text)
	ELSE query_stats.statement_end_offset
	END - query_stats.statement_start_offset )
	/ 2 ) + 1), dest.text) AS query_text ,
derp.query_plan , CAST(COALESCE(qs_live.query_plan, '<?No live query plan available. To turn on live plans, see https://www.BrentOzar.com/go/liveplans ?>') AS XML) AS live_query_plan ,  
qmg.query_cost ,
s.status ,
CASE
WHEN s.status <> 'sleeping' THEN COALESCE(wt.wait_info, RTRIM(blocked.lastwaittype) + ' (' + CONVERT(VARCHAR(10), blocked.waittime) + ')' ) 
ELSE NULL
END AS wait_info ,SUBSTRING(wt2.session_wait_info, 0, LEN(wt2.session_wait_info) ) AS top_session_waits ,CASE WHEN r.blocking_session_id <> 0 AND blocked.session_id IS NULL 
			THEN r.blocking_session_id
			WHEN r.blocking_session_id <> 0 AND s.session_id <> blocked.blocking_session_id 
			THEN blocked.blocking_session_id
			WHEN r.blocking_session_id = 0 AND s.session_id = blocked.session_id 
			THEN blocked.blocking_session_id
			WHEN r.blocking_session_id <> 0 AND s.session_id = blocked.blocking_session_id 
			THEN r.blocking_session_id
			ELSE NULL 
		END AS blocking_session_id,
COALESCE(r.open_transaction_count, blocked.open_tran) AS open_transaction_count ,
	CASE WHEN EXISTS (  SELECT 1 
FROM sys.dm_tran_active_transactions AS tat
JOIN sys.dm_tran_session_transactions AS tst
ON tst.transaction_id = tat.transaction_id
WHERE tat.name = 'implicit_transaction'
AND s.session_id = tst.session_id 
)  THEN 1 
ELSE 0 
END AS is_implicit_transaction ,
	s.nt_domain ,
s.host_name ,
s.login_name ,
s.nt_user_name ,program_name = COALESCE((
SELECT REPLACE(program_name,Substring(program_name,30,34),'"'+j.name+'"') 
FROM msdb.dbo.sysjobs j WHERE Substring(program_name,32,32) = CONVERT(char(32),CAST(j.job_id AS binary(16)),2)
),s.program_name) FROM sys.dm_exec_sessions AS s
LEFT JOIN sys.dm_exec_requests AS r
ON   r.session_id = s.session_id
LEFT JOIN ( SELECT DISTINCT
	wait.session_id ,
	( SELECT waitwait.wait_type + N' ('
		+ CAST(MAX(waitwait.wait_duration_ms) AS NVARCHAR(128))
		+ N' ms) '
	FROM   sys.dm_os_waiting_tasks AS waitwait
	WHERE  waitwait.session_id = wait.session_id
	GROUP BY  waitwait.wait_type
	ORDER BY  SUM(waitwait.wait_duration_ms) DESC
	FOR
	XML PATH('') ) AS wait_info
FROM sys.dm_os_waiting_tasks AS wait ) AS wt
ON   s.session_id = wt.session_id
LEFT JOIN sys.dm_exec_query_stats AS query_stats
ON   r.sql_handle = query_stats.sql_handle
AND r.plan_handle = query_stats.plan_handle
AND r.statement_start_offset = query_stats.statement_start_offset
AND r.statement_end_offset = query_stats.statement_end_offset
LEFT JOIN ( SELECT DISTINCT
						wait.session_id ,
						( SELECT TOP  5 waitwait.wait_type + N' ('
								+ CAST(MAX(waitwait.wait_time_ms) AS NVARCHAR(128))
								+ N' ms), '
							FROM   sys.dm_exec_session_wait_stats AS waitwait
							WHERE  waitwait.session_id = wait.session_id
							GROUP BY  waitwait.wait_type
							HAVING SUM(waitwait.wait_time_ms) > 5
							ORDER BY 1												 
							FOR
							XML PATH('') ) AS session_wait_info
				FROM sys.dm_exec_session_wait_stats AS wait ) AS wt2
ON   s.session_id = wt2.session_id
LEFT JOIN sys.dm_exec_query_stats AS session_stats
ON   r.sql_handle = session_stats.sql_handle
	AND r.plan_handle = session_stats.plan_handle
	AND r.statement_start_offset = session_stats.statement_start_offset
	AND r.statement_end_offset = session_stats.statement_end_offset
LEFT JOIN sys.dm_exec_query_memory_grants qmg
ON   r.session_id = qmg.session_id
AND r.request_id = qmg.request_id
LEFT JOIN sys.dm_exec_query_resource_semaphores qrs
ON   qmg.resource_semaphore_id = qrs.resource_semaphore_id
AND qmg.pool_id = qrs.pool_id
LEFT JOIN sys.resource_governor_workload_groups wg 
ON 		s.group_id = wg.group_id
LEFT JOIN sys.resource_governor_resource_pools rp 
ON		wg.pool_id = rp.pool_id
OUTER APPLY (
SELECT TOP 1
b.dbid, b.last_batch, b.open_tran, b.sql_handle, 
b.session_id, b.blocking_session_id, b.lastwaittype, b.waittime
FROM @blocked b
WHERE (s.session_id = b.session_id
OR s.session_id = b.blocking_session_id)
) AS blocked
OUTER APPLY sys.dm_exec_sql_text(COALESCE(r.sql_handle, blocked.sql_handle)) AS dest
OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS derp
OUTER APPLY (
SELECT CONVERT(DECIMAL(38,2), SUM( (((tsu.user_objects_alloc_page_count - user_objects_dealloc_page_count) * 8) / 1024.)) ) AS tempdb_allocations_mb
FROM sys.dm_db_task_space_usage tsu
WHERE tsu.request_id = r.request_id
AND tsu.session_id = r.session_id
AND tsu.session_id = s.session_id
) as tempdb_allocations
OUTER APPLY sys.dm_exec_query_statistics_xml(s.session_id) qs_live
WHERE s.session_id <> @@SPID 
AND s.host_name IS NOT NULL
AND COALESCE(DB_NAME(r.database_id), DB_NAME(blocked.dbid)) IS NOT NULL ORDER BY [elapsed_time] DESC
OPTION (RECOMPILE)  ; 
